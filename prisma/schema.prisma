generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Media Models
model MediaFile {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  title       String?
  description String?
  type        String
  format      String
  codec       String?
  size        BigInt
  duration    Float?
  bitrate     Int?
  resolution  String?
  framerate   Float?
  audioChannels Int?
  
  filePath      String   @unique
  thumbnailPath String?
  waveformPath  String?
  
  metadata    String?
  tags        String
  category    String?
  
  status      String @default("UPLOADED")
  uploadedAt  DateTime @default(now())
  processedAt DateTime?
  
  transcripts  Transcript[]
  timelines    Timeline[]
  imports      MediaImport[]
  exports      Export[]
  highlights   Highlight[]
  
  @@map("media_files")
  @@index([type, status])
  @@index([uploadedAt])
}

model MediaImport {
  id       String @id @default(cuid())
  url      String
  platform String
  quality  String
  
  originalTitle    String?
  originalDescription String?
  originalDuration Float?
  originalThumbnail String?
  
  status     String @default("PENDING")
  startedAt  DateTime @default(now())
  completedAt DateTime?
  error      String?
  
  mediaFile  MediaFile? @relation(fields: [mediaFileId], references: [id])
  mediaFileId String?
  
  @@map("media_imports")
  @@index([status, startedAt])
}

// Transcription Models
model Transcript {
  id         String @id @default(cuid())
  language   String
  confidence Float
  
  engine     String @default("whisperx")
  modelVersion String?
  processingTime Float?
  
  diarizationEnabled Boolean @default(true)
  maxSpeakers        Int     @default(5)
  
  status     String @default("PROCESSING")
  createdAt  DateTime @default(now())
  completedAt DateTime?
  error      String?
  
  mediaFile   MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)
  mediaFileId String
  
  segments    TranscriptSegment[]
  speakers    Speaker[]
  summaries   Summary[]
  
  @@map("transcripts")
  @@index([mediaFileId])
  @@index([status])
  @@index([language])
}

model TranscriptSegment {
  id         String @id @default(cuid())
  start      Float
  end        Float
  text       String
  confidence Float
  
  speaker    Speaker? @relation(fields: [speakerId], references: [id])
  speakerId  String?
  
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  transcriptId String
  
  words        Word[]
  
  @@map("transcript_segments")
  @@index([transcriptId, start])
  @@index([speakerId])
}

model Word {
  id         String @id @default(cuid())
  text       String
  start      Float
  end        Float
  confidence Float
  
  segment   TranscriptSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId String
  
  @@map("words")
  @@index([segmentId, start])
}

model Speaker {
  id               String @id @default(cuid())
  label            String
  name             String?
  totalDuration    Float   @default(0)
  segmentCount     Int     @default(0)
  averageConfidence Float  @default(0)
  
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  transcriptId String
  
  segments     TranscriptSegment[]
  
  @@map("speakers")
  @@index([transcriptId])
  @@unique([transcriptId, label])
}

// AI Features
model Summary {
  id          String @id @default(cuid())
  type        String
  length      String
  content     String
  confidence  Float?
  
  model       String  @default("gpt-3.5-turbo")
  promptVersion String?
  createdAt   DateTime @default(now())
  
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  transcriptId String
  
  @@map("summaries")
  @@index([transcriptId, type])
}

model Highlight {
  id          String @id @default(cuid())
  title       String
  startTime   Float
  endTime     Float
  duration    Float
  confidence  Float
  reason      String
  
  engagement  Float?
  sentiment   String?
  keywords    String
  
  status      String @default("SUGGESTED")
  createdAt   DateTime @default(now())
  
  mediaFile   MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)
  mediaFileId String
  
  exports     Export[]
  
  @@map("highlights")
  @@index([mediaFileId, status])
  @@index([confidence])
}

// Video Editing
model Timeline {
  id          String @id @default(cuid())
  name        String
  description String?
  
  settings    String
  duration    Float @default(0)
  
  status      String @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  mediaFile   MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)
  mediaFileId String
  
  tracks      Track[]
  exports     Export[]
  
  @@map("timelines")
  @@index([mediaFileId])
  @@index([status])
}

model Track {
  id       String @id @default(cuid())
  name     String
  type     String
  order    Int     @default(0)
  enabled  Boolean @default(true)
  locked   Boolean @default(false)
  
  volume   Float @default(1.0)
  opacity  Float @default(1.0)
  settings String?
  
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  timelineId String
  
  clips      Clip[]
  
  @@map("tracks")
  @@index([timelineId, order])
}

model Clip {
  id            String @id @default(cuid())
  name          String?
  
  sourceStart   Float
  sourceEnd     Float
  
  timelineStart Float
  duration      Float
  
  enabled       Boolean @default(true)
  locked        Boolean @default(false)
  volume        Float   @default(1.0)
  opacity       Float   @default(1.0)
  
  track   Track @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String
  
  effects Effect[]
  
  @@map("clips")
  @@index([trackId, timelineStart])
}

model Effect {
  id         String @id @default(cuid())
  type       String
  name       String
  parameters String
  enabled    Boolean @default(true)
  order      Int @default(0)
  
  startTime  Float?
  endTime    Float?
  
  clip   Clip @relation(fields: [clipId], references: [id], onDelete: Cascade)
  clipId String
  
  @@map("effects")
  @@index([clipId, order])
}

// Export System
model Export {
  id          String @id @default(cuid())
  filename    String
  format      String
  preset      String?
  settings    String
  
  outputPath  String?
  fileSize    BigInt?
  duration    Float?
  
  status      String @default("QUEUED")
  progress    Float @default(0)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  error       String?
  processingTime Float?
  
  mediaFile   MediaFile? @relation(fields: [mediaFileId], references: [id])
  mediaFileId String?
  
  timeline    Timeline? @relation(fields: [timelineId], references: [id])
  timelineId  String?
  
  highlight   Highlight? @relation(fields: [highlightId], references: [id])
  highlightId String?
  
  @@map("exports")
  @@index([status, startedAt])
  @@index([mediaFileId])
  @@index([timelineId])
}

// System Models
model Job {
  id          String @id @default(cuid())
  type        String
  priority    Int @default(0)
  data        String
  
  status      String @default("PENDING")
  progress    Float @default(0)
  result      String?
  error       String?
  
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  attempts    Int @default(0)
  maxAttempts Int @default(3)
  
  @@map("jobs")
  @@index([status, priority])
  @@index([type, status])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String
  category  String?
  updatedAt DateTime @updatedAt
  
  @@map("settings")
  @@index([category])
}

