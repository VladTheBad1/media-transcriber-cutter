version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://transcriber:${DB_PASSWORD:-transcriber_password}@db:5432/transcriber_db
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-500000000}
      - PYTHON_PATH=/usr/bin/python3
      - WHISPERX_SERVICE_PATH=/app/scripts/whisperx_service.py
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - media_uploads:/app/uploads
      - media_exports:/app/exports
      - media_temp:/app/temp
      - whisper_models:/app/models
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - transcriber-network

  # GPU-enabled application (alternative)
  app-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
      target: production
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://transcriber:${DB_PASSWORD:-transcriber_password}@db:5432/transcriber_db
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-500000000}
      - PYTHON_PATH=/usr/bin/python3
      - WHISPERX_SERVICE_PATH=/app/scripts/whisperx_service.py
      - CUDA_VISIBLE_DEVICES=0
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - media_uploads:/app/uploads
      - media_exports:/app/exports
      - media_temp:/app/temp
      - whisper_models:/app/models
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - transcriber-network
    profiles:
      - gpu

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=transcriber_db
      - POSTGRES_USER=transcriber
      - POSTGRES_PASSWORD=${DB_PASSWORD:-transcriber_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transcriber -d transcriber_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - transcriber-network

  # Redis for queue management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - transcriber-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - media_uploads:/usr/share/nginx/html/uploads:ro
      - media_exports:/usr/share/nginx/html/exports:ro
    depends_on:
      - app
    networks:
      - transcriber-network
    profiles:
      - nginx

  # Background worker for processing jobs
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    command: ["node", "scripts/worker.js"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://transcriber:${DB_PASSWORD:-transcriber_password}@db:5432/transcriber_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - PYTHON_PATH=/usr/bin/python3
      - WHISPERX_SERVICE_PATH=/app/scripts/whisperx_service.py
    volumes:
      - media_uploads:/app/uploads
      - media_exports:/app/exports
      - media_temp:/app/temp
      - whisper_models:/app/models
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - transcriber-network
    profiles:
      - worker

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_uploads:
    driver: local
  media_exports:
    driver: local
  media_temp:
    driver: local
  whisper_models:
    driver: local

networks:
  transcriber-network:
    driver: bridge